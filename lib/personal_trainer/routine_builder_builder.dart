import 'package:flutter/material.dart';
import 'package:flutter/cupertino.dart';
import 'package:fitapp/personal_trainer/menu_Card.dart';
import 'package:fitapp/personal_trainer/exercise_search.dart';
import 'dart:async';
import 'package:async/async.dart';
import 'package:fitapp/main.dart';
import 'dart:io';
import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'dart:math';

class routineBuilderBuilder extends StatefulWidget{
  final String currentDisplayName;

  routineBuilderBuilder({Key key, @required this.currentDisplayName}) : super(key: key);

  @override
  _routineBuilderBuilder createState() => new _routineBuilderBuilder();
}

class _routineBuilderBuilder extends State<routineBuilderBuilder>{
  //global variables
  String routineName;
  int totalDays;

  //function for getting the radio tile value to change
  setSelectedRadioTile(int val) {
    setState(() {
      totalDays = val;
    });
  }

  //function for generating the radio tile
  questionRadioTile(passRadioPrompt, passSubtitle, passValue,){
    return RadioListTile(
        title: new Text(passRadioPrompt),
        subtitle: new Text(passSubtitle),
        value: passValue,
        groupValue: totalDays,
        onChanged: (val){setSelectedRadioTile(val);},
        selected: false,
        activeColor: Colors.tealAccent,
    );
  }

  buildTopBarAndroid() {
    return new AppBar(
      backgroundColor: Colors.white,
      title: Text("Routine Builder"),
      leading: BackButton(color: Colors.black,),
    );
  }

  buildTopBarIOS(){
    return new CupertinoNavigationBar(
      leading: BackButton(color: Colors.black,),
      middle: Text("Routine Builder"),
    );
  }

  buildSearchField() {
    return new TextFormField(
          keyboardType: TextInputType.text,
          decoration: new InputDecoration(labelText: 'Name Your Routine...'),
          onFieldSubmitted: submit,
        );
  }

  buildSearchFieldIOS(){
    return new CupertinoTextField(
        keyboardType: TextInputType.text,
        clearButtonMode: OverlayVisibilityMode.editing,
        placeholder: "Name your routine...",
        onSubmitted: submit,
      );
  }

  int getLength(List passList){
    int counter;
    passList.forEach((element)=>counter++);
    return counter;
  }

  void submit(String passRoutineName) {
    //Set routine name = whatever was in the text field
    routineName = passRoutineName;
  }

  void generateRandomRoutine() async {

    //check if the values are empty
    if(routineName.trim() == "" || routineName == null || totalDays == null){
      Platform.isIOS ? CupertinoAlertDialog(
        title: new Text("Error"),
        content: new Text("The Routine Name or Amount of Days has not been set. Please set the routine name and or amount of days"),
        actions: <Widget>[
          CupertinoDialogAction(
              isDefaultAction: true,
              child: Text("OK"))
        ],

      ) : AlertDialog(
            title: new Text("Error"),
            content: new Text("The Routine Name or Amount of Days has not been set. Please set the routine name and or amount of days"),
            actions: <Widget>[
              FlatButton(child: Text("OK"), onPressed: null,)
            ],
      );
    }else{
      //username has been set by the value passed in currentDisplayName

      //Routine name has been set by the textbox

      //Routine Description
      String description = "Random routine generated by: " + widget.currentDisplayName + ". This routine has: " + totalDays.toString() + " days";

      //days has been set by the radio buttons

      //Query all the exercises
      //var getChest = await Firestore.instance.collection('NewExerciseDB').where('Muscle_Group', isEqualTo: "Chest").getDocuments();

      QuerySnapshot getChest = await Firestore.instance.collection('NewExerciseDB').where('Muscle_Group', isEqualTo: "Chest").getDocuments();
      QuerySnapshot getBiceps = await Firestore.instance.collection('NewExerciseDB').where('Muscle_Group', isEqualTo: 'Biceps').getDocuments();
      QuerySnapshot getTriceps = await Firestore.instance.collection('NewExerciseDB').where('Muscle_Group', isEqualTo: 'Triceps').getDocuments();
      QuerySnapshot getLats = await Firestore.instance.collection('NewExerciseDB').where('Muscle_Group', isEqualTo: 'Lats').getDocuments();
      QuerySnapshot getForearms = await Firestore.instance.collection('NewExerciseDB').where('Muscle_Group', isEqualTo: 'Forearms').getDocuments();
      QuerySnapshot getShoulders = await Firestore.instance.collection('NewExerciseDB').where('Muscle_Group', isEqualTo: 'Shoulders').getDocuments();
      QuerySnapshot getLowerBack = await Firestore.instance.collection('NewExerciseDB').where('Muscle_Group', isEqualTo: 'Lower Back').getDocuments();
      QuerySnapshot getQuads = await Firestore.instance.collection('NewExerciseDB').where('Muscle_Group', isEqualTo: 'Quadriceps').getDocuments();
      QuerySnapshot getHamStrings = await Firestore.instance.collection('NewExerciseDB').where('Muscle_Group', isEqualTo: 'Hamstrings').getDocuments();
      QuerySnapshot getMiddleBack = await Firestore.instance.collection('NewExerciseDB').where('Muscle_Group', isEqualTo: 'Middle Back').getDocuments();
      QuerySnapshot getCalves = await Firestore.instance.collection('NewExerciseDB').where('Muscle_Group', isEqualTo: 'Calves').getDocuments();
      
      //create all the lists
      List<String> allChest = [];
      List<String> allBiceps = [];
      List<String> allTriceps = [];
      List<String> allLats = [];
      List<String> allForearms = [];
      List<String> allShoulders = [];
      List<String> allLowerBack = [];
      List<String> allQuads = [];
      List<String> allHamstrings = [];
      List<String> allMiddleBack = [];
      List<String> allCalves = [];


      getChest.documents.forEach((element){allBiceps.add(element.data['Exercise_Name'].toString()); });
      getBiceps.documents.forEach((element){allBiceps.add(element.data['Exercise_Name'].toString()); });
      getTriceps.documents.forEach((element){allTriceps.add(element.data['Exercise_Name'].toString()); });
      getLats.documents.forEach((element){allLats.add(element.data['Exercise_Name'].toString()); });
      getForearms.documents.forEach((element){allForearms.add(element.data['Exercise_Name'].toString()); });
      getShoulders.documents.forEach((element){allShoulders.add(element.data['Exercise_Name'].toString()); });
      getLowerBack.documents.forEach((element){allLowerBack.add(element.data['Exercise_Name'].toString()); });
      getQuads.documents.forEach((element){allQuads.add(element.data['Exercise_Name'].toString()); });
      getHamStrings.documents.forEach((element){allHamstrings.add(element.data['Exercise_Name'].toString()); });
      getMiddleBack.documents.forEach((element){allMiddleBack.add(element.data['Exercise_Name'].toString()); });
      getCalves.documents.forEach((element){allMiddleBack.add(element.data['Exercise_Name'].toString()); });


      print("Chest Length is: " + allChest.length.toString());
      print("Total Days is: " + totalDays.toString());

      //generate based off days
      switch (totalDays) {
        case 2:
          //Generate Randoms for all Muscle Groups
          var chestFirstRand = Random().nextInt(allChest.length + 1);
          print(allChest.length.toString());
          var chestSecondRand = chestFirstRand;
          while(chestSecondRand == chestFirstRand){
            chestSecondRand = Random().nextInt(allChest.length + 1);
          }

          var bicepFirstRand = Random().nextInt(allBiceps.length + 1);
          var bicepSecondRand = bicepFirstRand;
          while(bicepSecondRand == bicepFirstRand){
            bicepSecondRand = Random().nextInt(allBiceps.length + 1);
          }

          var tricepFirstRand = Random().nextInt(allTriceps.length + 1);
          var tricepSecondRand = tricepFirstRand;
          while(tricepSecondRand == tricepFirstRand){
            tricepSecondRand = Random().nextInt(allTriceps.length + 1);
          }

          var latsFirstRand = Random().nextInt(allLats.length + 1);
          var latsSecondRand = latsFirstRand;
          while(latsSecondRand == latsFirstRand){
            latsSecondRand = Random().nextInt(allLats.length + 1);
          }

          var forearmsFirstRand = Random().nextInt(allForearms.length + 1);
          var forearmsSecondRand = forearmsFirstRand;
          while(forearmsSecondRand == forearmsFirstRand){
            forearmsSecondRand = Random().nextInt(allForearms.length) + 1;
          }

          var shouldersFirstRand = Random().nextInt(allShoulders.length + 1);
          var shouldersSecondRand = shouldersFirstRand;
          while(shouldersSecondRand == shouldersFirstRand){
            shouldersSecondRand = Random().nextInt(allShoulders.length + 1);
          }

          var lowerBackFirstRand = Random().nextInt(allLowerBack.length + 1);
          var lowerBackSecondRand = lowerBackFirstRand;
          while(lowerBackSecondRand == lowerBackFirstRand){
            lowerBackSecondRand = Random().nextInt(allLowerBack.length + 1);
          }
          var lowerBackThirdRand = lowerBackFirstRand;
          while(lowerBackThirdRand == lowerBackFirstRand || lowerBackThirdRand == lowerBackSecondRand){
            lowerBackThirdRand = Random().nextInt(allLowerBack.length + 1);
          }

          var quadFirstRand = Random().nextInt(allQuads.length + 1);
          var quadSecondRand = quadFirstRand;
          while(quadSecondRand == quadFirstRand){
            quadSecondRand = Random().nextInt(allQuads.length + 1);
          }
          var quadThirdRand = quadFirstRand;
          while(quadThirdRand == quadFirstRand || quadThirdRand == quadSecondRand){
            quadThirdRand = Random().nextInt(allQuads.length + 1);
          }

          var hamstringFirstRand = Random().nextInt(allHamstrings.length + 1);
          var hamstringSecondRand = hamstringFirstRand;
          while(hamstringSecondRand == hamstringFirstRand){
            hamstringSecondRand = Random().nextInt(allHamstrings.length + 1);
          }
          var hamstringThirdRand = hamstringFirstRand;
          while(hamstringThirdRand == hamstringFirstRand || hamstringThirdRand == hamstringSecondRand){
            hamstringThirdRand = Random().nextInt(allHamstrings.length + 1);
          }

          var calvesFirstRand = Random().nextInt(allCalves.length + 1);
          var calvesSecondRand = calvesFirstRand;
          while(calvesSecondRand == calvesFirstRand){
            calvesSecondRand = Random().nextInt(allCalves.length + 1);
          }
          var calvesThirdRand = calvesFirstRand;
          while(calvesThirdRand == calvesFirstRand || calvesThirdRand == calvesSecondRand){
            lowerBackThirdRand = Random().nextInt(allCalves.length + 1);
          }

          var middleBackFirstRand = Random().nextInt(allMiddleBack.length + 1);
          var middleBackSecondRand = middleBackFirstRand;
          while(middleBackSecondRand == middleBackFirstRand){
            middleBackSecondRand = Random().nextInt(allMiddleBack.length + 1);
          }
          var middleBackThirdRand = middleBackFirstRand;
          while(middleBackThirdRand == middleBackFirstRand || middleBackThirdRand == middleBackSecondRand){
            middleBackThirdRand = Random().nextInt(allMiddleBack.length + 1);
          }

          print("Finished getting random numbers");


          Firestore.instance.collection('Routines').document(routineName).setData({
            'username': widget.currentDisplayName,
            'Routine Name': routineName,
            'Routine Description': description,
            'Days': totalDays,
            'Day 1': {
              '1': [allChest.elementAt(chestFirstRand).toString(), "Chest", 4, 8],
              '2': [allChest.elementAt(chestSecondRand).toString(), "Chest", 4, 8],
              '3': [allBiceps.elementAt(bicepFirstRand).toString(), "Biceps", 4, 8],
              '4': [allBiceps.elementAt(bicepSecondRand).toString(), "Biceps", 4, 8],
              '5': [allTriceps.elementAt(tricepFirstRand).toString(), "Triceps", 4, 8],
              '6': [allTriceps.elementAt(tricepSecondRand).toString(), "Triceps", 4, 8],
              '7': [allLats.elementAt(latsFirstRand).toString(), "Lats", 4, 8],
              '8': [allLats.elementAt(latsSecondRand).toString(), "Lats", 4, 8],
              '9': [allForearms.elementAt(forearmsFirstRand).toString(), "Forearms", 4, 8],
              '10': [allForearms.elementAt(forearmsSecondRand).toString(), "Forearms", 4, 8],
              '11': [allShoulders.elementAt(shouldersFirstRand).toString(), "Shoulders", 4, 8],
              '12': [allShoulders.elementAt(shouldersSecondRand).toString(), "Shoulders", 4, 8],
            },
            'Day 2': {
              '1': [allMiddleBack.elementAt(middleBackFirstRand).toString(), "Middle Back", 4, 8],
              '2': [allMiddleBack.elementAt(middleBackSecondRand).toString(), "Middle Back", 4, 8],
              '3': [allMiddleBack.elementAt(middleBackThirdRand).toString(), "Middle Back", 4, 8],
              '4': [allLowerBack.elementAt(lowerBackFirstRand).toString(), "Lower Back", 4, 8],
              '5': [allLowerBack.elementAt(lowerBackSecondRand).toString(), "Lower Back", 4, 8],
              '6': [allLowerBack.elementAt(lowerBackThirdRand).toString(), "Lower Back", 4, 8],
              '7': [allQuads.elementAt(quadFirstRand).toString(), "Quadriceps", 4, 8],
              '8': [allQuads.elementAt(quadSecondRand).toString(), "Quadriceps", 4, 8],
              '9': [allQuads.elementAt(quadThirdRand).toString(), "Quadriceps", 4, 8],
              '10': [allHamstrings.elementAt(hamstringFirstRand).toString(), "Hamstrings", 4, 8],
              '11': [allHamstrings.elementAt(hamstringSecondRand).toString(), "Hamstrings", 4, 8],
              '12': [allHamstrings.elementAt(hamstringThirdRand).toString(), "Hamstrings", 4, 8],
            }
          });

          print("Finished adding to firebase");

          break;
        case 3:
          break;
        case 4:
          break;
        case 5:
          break;
        case 6:
          break;
      }

    }

    //notify that the routine has been generated
    Platform.isIOS ? CupertinoAlertDialog(
      title: new Text("Congratulations"),
      content: new Text("Your random routine has been created!"),
      actions: <Widget>[
        CupertinoDialogAction(
            isDefaultAction: true,
            child: Text("OK"))
      ],

    ) : AlertDialog(
      title: new Text("Cogratulations"),
      content: new Text("Your random routine has been created!"),
      actions: <Widget>[
        FlatButton(child: Text("OK"), onPressed: null,)
      ],
    );

    print("Button Pressed");

    //pop to main menu
    Navigator.pop(context);
  }

  //builder for the page
  Widget build(BuildContext context){
      return Scaffold(
        appBar: Platform.isIOS ? buildTopBarIOS() : buildTopBarAndroid(),
        body: Container(
          //width: BoxFit.fitWidth,
         child: Column(
          children: <Widget>[
            Container(

                child: new Text("How Many Days would you like the Routine to be?")
            ),

            //Questions with the radio buttons
            Container(
              //width:,
              child: //new Row(
                //children: <Widget>[
                  Container(child: questionRadioTile("2 Days", "Total Body Style Routine", 2),),
                  //Container(child: questionRadioTile("3 Days", "Push Pull Legs Style Routine", 3),),
                  //Container(child: questionRadioTile("4 Days", "Total Body Style Routine", 4),),
                  //Container(child: questionRadioTile("5 Days", "Isolation Style Routine", 5),),
                  //Container(child: questionRadioTile("6 Days", "Push Pull Legs Style Routine", 6),),
                //],
              ),
            //),

            //Container for the Routine
            Container(
              padding: const EdgeInsets.only(left: 10.0, right: 10.0, top: 20.0),
              child: Platform.isIOS ? buildSearchFieldIOS() : buildSearchField(),
            ),

            //Container for the Submit Button
            Container(
              // https://medium.com/flutter-community/flutter-push-pop-push-1bb718b13c31
              child: new GestureDetector(
                onTap: () {
                  //generate the routine
                  generateRandomRoutine();
                },
                child: Container(padding: const EdgeInsets.only(left: 10.0, right: 10.0, top: 10.0, bottom: 10.0) ,child: new Text("Generate Routine")),
              ),
            ),
          ],
        )
        )
      );
  }
}